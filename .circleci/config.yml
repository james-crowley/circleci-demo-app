version: 2.1


orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1
  snyk: snyk/snyk@1.1.1


commands:
  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            echo 'export PATH=$(pwd)/venv/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
  
  save-docker-image:
    description: "Saves a Docker image for future Jobs"
    steps:
      - run: mkdir -p /tmp/docker-images/
      - run:
          name: Saving Docker Image
          command: docker save --output /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images/*

  load-docker-image:
    description: "Loads a Docker image"
    steps:
      - attach_workspace:
          at: /tmp
      - run:
            name: Loading Docker Image
            command: docker load --input /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar
  
  testing-docker-image:
    description: "Launches tests against a Docker image"
    steps:
      - checkout
      - run:
          name: Install goss
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path
            export GOSS_DST=~/bin
            export PATH=$PATH:~/bin
            export GOSS_OPTS="--format junit"
            curl -fsSL https://goss.rocks/install | sh
            goss -version
      - run:
          name: Make Directory for Goss Results
          command: mkdir goss-results
      - run:
          name: Run dgoss Test
          command: |
            export GOSS_OPTS="--format junit"
            dgoss run -p 8080:8080 ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} > ./goss-results/report.xml
      - store_test_results:
          path: goss-results
      - store_artifacts:
          path: goss-results

  build:
    description: "Build Docker image"
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build --build-arg VERSION=${VERSION} --build-arg CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL} --build-arg CIRCLE_SHA1=${CIRCLE_SHA1} --build-arg CIRCLE_USERNAME=${CIRCLE_USERNAME} --build-arg CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} -t ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} -f Dockerfile .

  tagging:
    description: "Add tags to a Docker Image"
    steps:
      - run:
          name: Tag Image
          command: | 
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest
    
  publish:
    description: "Publish Docker Image"
    steps:  
      - run:
          name: "Publish Docker Images to Docker Hub"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} 
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest

  sonarcloud-scan:
    description: "Run Sonar Cloud Scan"
    parameters:
      requirements-path:
        type: string
    steps:
      - checkout
      - restore_cache: 
          key: deps1-{{ .Branch }}-{{ checksum "<< parameters.requirements-path >>" }}
      - run:
          name: Pip Install Production Requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate            
            pip3 install -r << parameters.requirements-path >>
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "<< parameters.requirements-path >>" }}
          paths:
            - "venv"
      - sonarcloud/scan

  run-pytest:
    description: "Run PyTest"
    parameters:
      requirements-path:
        type: string
      pytest-args:
        type: string
        default: "--verbose"
    steps:
      - checkout
      - restore_cache: 
          key: deps1-{{ .Branch }}-{{ checksum "<< parameters.requirements-path >>" }}
      - run:
          name: Pip Install Testing Requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate            
            pip3 install -r << parameters.requirements-path >>
            export PATH=$PATH:$(pwd)/venv/bin
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "<< parameters.requirements-path >>" }}
          paths:
            - "venv"
      - run:
          name: Make Directory for Test Results
          command: mkdir test-results
      - run:
          name: Run PyTest Test Suite
          command: |
            set -e
            TEST_FILES=$(circleci tests glob "demo/tests/*test*.py" | circleci tests split --split-by=timings)
            pytest << parameters.pytest-args >> $TEST_FILES ; err=$? ; if (( $err != 5 )) ; then exit $err ; fi
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

executors:
  browsers-python:
    docker:
      - image: cimg/python:3.9-browsers

  docker-builder:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: medium


jobs:
  test-demo:
    parallelism: 3
    executor: browsers-python
    steps:
      - set-build-env
      - run-pytest:
          requirements-path: "./demo/requirements/testing.txt"
          pytest-args: "--live-server-port 8080 --verbose --junitxml=test-results/junit.xml"

  scan-demo:
    executor: browsers-python
    steps:
      - set-build-env
      - sonarcloud-scan:
          requirements-path: "./demo/requirements/production.txt"

  build-image:
    executor: docker-builder
    steps:
      - set-build-env
      - build
      - save-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app

  test-image:
    executor: docker-builder
    steps:
      - set-build-env
      - load-docker-image
      - testing-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app
      GOSS_SLEEP: 10

  scan-image:
    executor: docker-builder
    steps:
      - set-build-env
      - load-docker-image
      - snyk/scan:
          docker-image-name: ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
    environment:
      DOCKER_IMAGE: circleci-demo-app

  tag-and-publish:
    executor: docker-builder
    steps:
      - set-build-env
      - load-docker-image
      - tagging
      - publish
    environment:
      DOCKER_IMAGE: circleci-demo-app

workflows:
  demo:
    jobs:
      - test-demo:
          name: "Testing Python Demo Code"
      - scan-demo:
          name: "Scan Python Demo Code"
          context: SonarCloud
      - build-image:
          name: "Building Docker Image"
      - test-image:
          name: "Testing Docker Image"
          requires:
            - "Building Docker Image"
      - scan-image:
          name: "Scan image via Snyk"
          requires:
            - "Building Docker Image"
      - tag-and-publish:
          name: "Tag and Publish Docker Images"
          requires:
            - "Testing Docker Image"
            - "Scan image via Snyk"
            - "Testing Python Demo Code"
            - "Scan Python Demo Code"
          filters:
            branches:
              only: optimized