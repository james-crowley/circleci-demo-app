version: 2.1

parameters:
  cleanup:
    type: boolean
    default: false
    description: Should this run cleanup an old deploy?
  version:
    type: string
    default: ""
    description: the version (latest or prior) to be deleted
  job_name:
    type: string
    default: delete deployment

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1
  snyk: snyk/snyk@1.1.1


commands:
  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV
  
  save-docker-image:
    description: "Saves a Docker image for future Jobs"
    steps:
      - run: mkdir -p /tmp/docker-images/
      - run:
          name: Saving Docker Image
          command: docker save --output /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images/*

  load-docker-image:
    description: "Loads a Docker image"
    steps:
      - attach_workspace:
          at: /tmp
      - run:
            name: Loading Docker Image
            command: docker load --input /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar

  testing-docker-image:
    description: "Launches tests against a Docker image"
    steps:
      - checkout
      - run:
          name: Install goss
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path
            export GOSS_DST=~/bin
            export PATH=$PATH:~/bin
            export GOSS_OPTS="--format junit"
            curl -fsSL https://goss.rocks/install | sh
            goss -version
      - run:
          name: Make Directory for Goss Results
          command: mkdir goss-results
      - run:
          name: Run dgoss Test
          command: |
            export GOSS_OPTS="--format junit"
            dgoss run -p 8080:8080 ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} > ./goss-results/report.xml
      - store_test_results:
          path: goss-results
      - store_artifacts:
          path: goss-results

  build:
    description: "Build Docker image"
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build --build-arg VERSION=${VERSION} --build-arg CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL} --build-arg CIRCLE_SHA1=${CIRCLE_SHA1} --build-arg CIRCLE_USERNAME=${CIRCLE_USERNAME} --build-arg CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} -t ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} -f Dockerfile .

  tagging:
    description: "Add tags to a Docker Image"
    steps:
      - run:
          name: Tag Image
          command: | 
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest
    
  publish:
    description: "Publish Docker Image"
    steps:  
      - run:
          name: "Publish Docker Images to Docker Hub"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} 
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest

  run-pytest:
    description: "Run PyTest"
    parameters:
      requirements-path:
        type: string
      pytest-args:
        type: string
        default: "--verbose"
    steps:
      - checkout
      - run:
          name: Pip Install Testing Requirements
          command: pip install -r << parameters.requirements-path >>
      - sonarcloud/scan
      - run:
          name: Make Directory for Test Results
          command: mkdir test-results
      - run:
          name: Run PyTest Test Suite
          command: pytest << parameters.pytest-args >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  stop-running-containers:
    description: "Stop Running Containers on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
    steps:
      - run:
          name: "SSH into host and Stop all Images"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker rm -f \$(docker ps -a -q)" || echo "No Running Containers"

  remove-all-images:
    description: "Remove all images on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
    steps:
      - run:
          name: "SSH into host and Remove all Images"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker rmi -f \$(docker images -q)" || echo "No Images to Remove"
              
  pull-image:
    description: "Pull Image on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
      image-tag:
        type: string
        default: "latest"
    steps:
      - run:
          name: "SSH into host and Pull down an Image"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker pull ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:<< parameters.image-tag >>"

  deploy-application:
    description: "Deploy Application on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
      image-tag:
        type: string
        default: "latest"
    steps:
      - run:
          name: "SSH into host and Deploy Application"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker run -d -p 80:8080 ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:<< parameters.image-tag >>"


executors:
  browsers-python:
    docker:
      - image: circleci/python:3.9-browsers

  docker-builder:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: medium

  amd64:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium


jobs:
  test-demo:
    executor: browsers-python
    steps:
      - run-pytest:
          requirements-path: "./demo/requirements/testing.txt"
          pytest-args: "--live-server-port 8080 --verbose --junitxml=test-results/junit.xml"

  build-image:
    executor: docker-builder
    steps:
      - set-build-env
      - build
      - save-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app

  test-image:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - testing-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app
      GOSS_SLEEP: 10

  scan-image:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - snyk/scan:
          docker-image-name: ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
    environment:
      DOCKER_IMAGE: circleci-demo-app

  tag-and-publish:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - tagging
      - publish
    environment:
      DOCKER_IMAGE: circleci-demo-app


  update-deployment:
    docker: 
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install gettext-base graphviz
      - set-build-env
      - run: 
          name: Update image & version in manifest
          command: |
            envsubst < vamp/demo-deployment.yml > modified-deployment.yaml
            cat modified-deployment.yaml
      - kubernetes/install-kubectl
      - run:
          name: Create minimal kubeconfig for Service Account
          command: |
            export DECODED_TOKEN=$(echo ${SE_DEMO_CLUSTER_CCI_USER_TOKEN} | base64 -d)
            echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1ERXlOakl4TXpJek1Wb1hEVE15TURFeU5ESXhNekl6TVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWY0Ck9nUjVscmtobGpvS2tWRm1pb1NjbjBISGpCVjUrZnNhZUp1K1JSMFV0WCtSVUc5TkUzelZObmlPNVAyUzlURE4KRTgyczRxR254YSs3T2Y3aStWb0FIWnBXS000MjZueEVXeGFISS9QaXU2NlNTS0l3NGF0RHc3b0IxRFFWQ2VOcwpsQmN3UVFXYTJlN1FyR2l2bUlZOGc0am4xam13Q0xhV20wSnJqUTAwaWl6WUJoQytsbHZmWVEzaExlTW5XUGVSCi90Tm94VExZOFUxcWI4WTcvMzFrNDlidHA2bHR2Z1ExaGJ6NHMyMC9KekwzeUpXMStWdG0zbDJRUnZFQzhXY1QKVG4rVi9EYU5TYmo3SWp4NC84Qno0N0J1a3FrQVRDV1B0N0kvZWQ5WFJCcWRFQmM5NDFnZVpPUjRWZE52NlFkdAp3dW05WGJGbzhYb0U0a2xPVTRFQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKTVo4ZDNwdEp0ZTJmaTFMUTdlMjYvZW5MV1hNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBK0MzbjBXTFgvTGpRbk05R3NHMjdtU0x2UjNTZWNTWWt1SUhXdzlDVExSb3RVVDAySgpJWXAyUm50M3pSK20zTFNrdEt0em50aTlSR3AwdWpvVUU3ZnhXdnk0K3JwRUZ2Y2dvc29QUFVQdmNWS0Y2b3Q2ClR5M1V0RVJML28vaS9vcStabTBpM1FLMUg3alprRFIvUVlOeUI1YTlCMkdvOW4rS0ZZaCtOa3lKUVdnT1gwYzUKbFErSC94dDRkK2tqK3hIT3F4UDdlMFJsMCszWUdjMk5VdDE1Ukp4dG9YMDZoRHJzdFlRMkJreEVXcUxFdEtlZApwM3gwN2wvTUx0R3VJbm1UZHhLaS9xQ3Q1NEtxSUJ1TEJWbjZUR0xJaCtJc01SREJaU1hETTc5YWtQV0dDU1V1CnFsK2Y2Mll1d1hWb0luNHpPRUl6eFJuYy8yY1J3RHpzcUszdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== | base64 -d > ca.crt
            kubectl config set-cluster jim-crowley-dev-1 --server=https://DA70318F64E302F1B84D856EF9FDE552.gr7.us-west-2.eks.amazonaws.com --certificate-authority=ca.crt
            kubectl config set-credentials jims-bot --token=${DECODED_TOKEN}
            kubectl config set-context cci --user=jims-bot --namespace=production --cluster=jim-crowley-dev-1
            kubectl config use-context cci
      - kubernetes/create-or-update-resource:
          namespace: production
          resource-file-path: modified-deployment.yaml
      - run: kubectl rollout status -f modified-deployment.yaml
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 10 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png
    environment:
      DOCKER_IMAGE: circleci-demo-app

  delete-deployment:
    docker: 
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install graphviz
      - kubernetes/install-kubectl
      - run:
          name: Create minimal kubeconfig for Service Account
          command: |
            export DECODED_TOKEN=$(echo ${SE_DEMO_CLUSTER_CCI_USER_TOKEN} | base64 -d)
            echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1ERXlOakl4TXpJek1Wb1hEVE15TURFeU5ESXhNekl6TVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWY0Ck9nUjVscmtobGpvS2tWRm1pb1NjbjBISGpCVjUrZnNhZUp1K1JSMFV0WCtSVUc5TkUzelZObmlPNVAyUzlURE4KRTgyczRxR254YSs3T2Y3aStWb0FIWnBXS000MjZueEVXeGFISS9QaXU2NlNTS0l3NGF0RHc3b0IxRFFWQ2VOcwpsQmN3UVFXYTJlN1FyR2l2bUlZOGc0am4xam13Q0xhV20wSnJqUTAwaWl6WUJoQytsbHZmWVEzaExlTW5XUGVSCi90Tm94VExZOFUxcWI4WTcvMzFrNDlidHA2bHR2Z1ExaGJ6NHMyMC9KekwzeUpXMStWdG0zbDJRUnZFQzhXY1QKVG4rVi9EYU5TYmo3SWp4NC84Qno0N0J1a3FrQVRDV1B0N0kvZWQ5WFJCcWRFQmM5NDFnZVpPUjRWZE52NlFkdAp3dW05WGJGbzhYb0U0a2xPVTRFQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKTVo4ZDNwdEp0ZTJmaTFMUTdlMjYvZW5MV1hNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBK0MzbjBXTFgvTGpRbk05R3NHMjdtU0x2UjNTZWNTWWt1SUhXdzlDVExSb3RVVDAySgpJWXAyUm50M3pSK20zTFNrdEt0em50aTlSR3AwdWpvVUU3ZnhXdnk0K3JwRUZ2Y2dvc29QUFVQdmNWS0Y2b3Q2ClR5M1V0RVJML28vaS9vcStabTBpM1FLMUg3alprRFIvUVlOeUI1YTlCMkdvOW4rS0ZZaCtOa3lKUVdnT1gwYzUKbFErSC94dDRkK2tqK3hIT3F4UDdlMFJsMCszWUdjMk5VdDE1Ukp4dG9YMDZoRHJzdFlRMkJreEVXcUxFdEtlZApwM3gwN2wvTUx0R3VJbm1UZHhLaS9xQ3Q1NEtxSUJ1TEJWbjZUR0xJaCtJc01SREJaU1hETTc5YWtQV0dDU1V1CnFsK2Y2Mll1d1hWb0luNHpPRUl6eFJuYy8yY1J3RHpzcUszdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== | base64 -d > ca.crt
            kubectl config set-cluster jim-crowley-dev-1 --server=https://DA70318F64E302F1B84D856EF9FDE552.gr7.us-west-2.eks.amazonaws.com --certificate-authority=ca.crt
            kubectl config set-credentials jims-bot --token=${DECODED_TOKEN}
            kubectl config set-context cci --user=jims-bot --namespace=production --cluster=jim-crowley-dev-1
            kubectl config use-context cci
      
      - run:
          name: Delete deployment << pipeline.parameters.version >>
          command: kubectl -n production delete deployment circleci-demo-app-v<<pipeline.parameters.version>>
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 2 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png


workflows:
  demo:
    unless: << pipeline.parameters.cleanup >>
    jobs:
      - test-demo:
          name: "Testing Python Demo Code"
          context: SonarCloud
      - build-image:
          name: "Building Docker Image"
      - test-image:
          name: "Testing Docker Image"
          requires:
            - "Building Docker Image"
      - scan-image:
          name: "Scan image via Snyk"
          requires:
            - "Building Docker Image"
      - tag-and-publish:
          name: "Tag and Publish Docker Images"
          requires:
            - "Testing Docker Image"
            - "Scan image via Snyk"
            - "Testing Python Demo Code"
          filters:
            branches:
              only: vamp
      - hold:
          name: "Approval Needed for Deployment"
          type: approval
          requires:
            - "Tag and Publish Docker Images"
          filters:
            branches:
              only: vamp
      - update-deployment:
          requires:
            - "Tag and Publish Docker Images"
            - "Approval Needed for Deployment"
          filters:
            branches:
              only: vamp

  the-fixer:
    when: << pipeline.parameters.cleanup >>
    jobs:
      - delete-deployment:
          name: << pipeline.parameters.job_name >>
