version: 2.1


orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1
  snyk: snyk/snyk@1.1.1
  path-filtering: circleci/path-filtering@0.1.1
  android: circleci/android@1.0


commands:
  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV
  
  save-docker-image:
    description: "Saves a Docker image for future Jobs"
    steps:
      - run: mkdir -p /tmp/docker-images/
      - run:
          name: Saving Docker Image
          command: docker save --output /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images/*

  load-docker-image:
    description: "Loads a Docker image"
    steps:
      - attach_workspace:
          at: /tmp
      - run:
            name: Loading Docker Image
            command: docker load --input /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar

  testing-docker-image:
    description: "Launches tests against a Docker image"
    steps:
      - checkout
      - run:
          name: Install goss
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path
            export GOSS_DST=~/bin
            export PATH=$PATH:~/bin
            export GOSS_OPTS="--format junit"
            curl -fsSL https://goss.rocks/install | sh
            goss -version
      - run:
          name: Make Directory for Goss Results
          command: mkdir goss-results
      - run:
          name: Run dgoss Test
          command: |
            export GOSS_OPTS="--format junit"
            dgoss run -p 8080:8080 ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} > ./goss-results/report.xml
      - store_test_results:
          path: goss-results
      - store_artifacts:
          path: goss-results

  build:
    description: "Build Docker image"
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build --build-arg VERSION=${VERSION} --build-arg CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL} --build-arg CIRCLE_SHA1=${CIRCLE_SHA1} --build-arg CIRCLE_USERNAME=${CIRCLE_USERNAME} --build-arg CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} -t ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} -f Dockerfile .

  tagging:
    description: "Add tags to a Docker Image"
    steps:
      - run:
          name: Tag Image
          command: | 
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest
    
  publish:
    description: "Publish Docker Image"
    steps:  
      - run:
          name: "Publish Docker Images to Docker Hub"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} 
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest

  run-pytest:
    description: "Run PyTest"
    parameters:
      requirements-path:
        type: string
      pytest-args:
        type: string
        default: "--verbose"
    steps:
      - checkout
      - run:
          name: Pip Install Testing Requirements
          command: pip install -r << parameters.requirements-path >>
      - sonarcloud/scan
      - run:
          name: Make Directory for Test Results
          command: mkdir test-results
      - run:
          name: Run PyTest Test Suite
          command: pytest << parameters.pytest-args >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  stop-running-containers:
    description: "Stop Running Containers on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
    steps:
      - run:
          name: "SSH into host and Stop all Images"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker rm -f \$(docker ps -a -q)" || echo "No Running Containers"

  remove-all-images:
    description: "Remove all images on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
    steps:
      - run:
          name: "SSH into host and Remove all Images"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker rmi -f \$(docker images -q)" || echo "No Images to Remove"
              
  pull-image:
    description: "Pull Image on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
      image-tag:
        type: string
        default: "latest"
    steps:
      - run:
          name: "SSH into host and Pull down an Image"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker pull ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:<< parameters.image-tag >>"

  deploy-application:
    description: "Deploy Application on Remote Host"
    parameters:
      remote-ip:
        type: env_var_name
        default: REMOTE_IP
      remote-user:
        type: env_var_name
        default: REMOTE_USER
      image-tag:
        type: string
        default: "latest"
    steps:
      - run:
          name: "SSH into host and Deploy Application"
          command: |
             ssh -o StrictHostKeyChecking=no ${<< parameters.remote-user >>}@${<< parameters.remote-ip >>} "docker run -d -p 80:8080 ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:<< parameters.image-tag >>"


executors:
  browsers-python:
    docker:
      - image: circleci/python:3.9-browsers

  docker-builder:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: medium

  amd64:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium


jobs:
  test-demo:
    executor: browsers-python
    steps:
      - run-pytest:
          requirements-path: "./demo/requirements/testing.txt"
          pytest-args: "--live-server-port 8080 --verbose --junitxml=test-results/junit.xml"

  build-image:
    executor: docker-builder
    steps:
      - set-build-env
      - build
      - save-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app

  test-image:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - testing-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app
      GOSS_SLEEP: 10

  scan-image:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - snyk/scan:
          docker-image-name: ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
    environment:
      DOCKER_IMAGE: circleci-demo-app

  tag-and-publish:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - tagging
      - publish
    environment:
      DOCKER_IMAGE: circleci-demo-app

  deploy-via-ip-ranges:
    circleci_ip_ranges: true
    docker:
      - image: cimg/base:2021.10
    steps:
      - add_ssh_keys:
          fingerprints:
            - "dd:8f:af:18:32:a1:c9:b7:86:ca:73:a1:1e:77:db:87"
      - stop-running-containers
      - remove-all-images
      - pull-image
      - deploy-application
    environment:
      DOCKER_IMAGE: circleci-demo-app
      REMOTE_IP: 18.191.154.49
      REMOTE_USER: ubuntu

  build_kotlin:
    docker:
      - image: cimg/android:2021.10.2
    steps:
    - checkout
    - restore_cache:
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "androidApp/build.gradle.kts" }}
    - run:
        name: Download Dependencies
        command: |
          cd ./mobile-app/
          gradlew androidDependencies
    - save_cache:
        paths:
          - ~/.gradle
        key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "androidApp/build.gradle.kts" }}
    - run:
        name: Build project
        command: |
          cd ./mobile-app/
          gradlew build
    - persist_to_workspace:
        root: .
        # Must be relative path from root
        paths:
          - mobile-app/build/*
          - mobile-app/shared/build/*
          - mobile-app/androidApp/build/*

  lint_kotlin:
    docker:
      - image: cimg/android:2021.10.2
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
            key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "androidApp/build.gradle.kts" }}
      - run:
          name: Run Linter
          command: |
            cd ./mobile-app/
            gradlew lint
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: mobile-app/androidApp/build/reports/
          destination: mobile-app/androidApp-reports
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: mobile-app/shared/build/reports/
          destination: mobile-app/shared-reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: mobile-app/androidApp/build/test-results
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: mobile-app/shared/build/test-results

  test_kotlin:
    docker:
      - image: cimg/android:2021.10.2
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
            key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "androidApp/build.gradle.kts" }}
      - run:
          name: Run Tests
          command: |
            cd ./mobile-app/
            gradlew test
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: mobile-app/androidApp/build/reports/
          destination: mobile-app/androidApp-reports
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: mobile-app/shared/build/reports/
          destination: mobile-app/shared-reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: mobile-app/androidApp/build/test-results
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: mobile-app/shared/build/test-results

  test_ios:
    macos:
      xcode: 13.1.0 # indicate our selected version of Xcode
    resource_class: large
    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: |
            cd ./mobile-app/iosApp
            xcodebuild test -scheme iosApp -destination 'platform=iOS Simulator,name=iPhone 13 Pro,OS=15.0' | xcpretty --report junit
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: mobile-app/iosApp/build/reports

  deploy_android_app:
    docker:
      - image: cimg/node:14.10.1 # the primary container, where your job's commands are run
    steps:
      - run: echo "Deploy to Google Play Store"

  deploy_ios_app:
    docker:
      - image: cimg/node:14.10.1 # the primary container, where your job's commands are run
    steps:
      - run: echo "Deploy to Apple App Store"


workflows:
  demo:
    jobs:
      - test-demo:
          name: "Testing Python Demo Code"
          context: SonarCloud
      - build-image:
          name: "Building Docker Image"
      - test-image:
          name: "Testing Docker Image"
          requires:
            - "Building Docker Image"
      - scan-image:
          name: "Scan image via Snyk"
          requires:
            - "Building Docker Image"
      - tag-and-publish:
          name: "Tag and Publish Docker Images"
          requires:
            - "Testing Docker Image"
            - "Scan image via Snyk"
            - "Testing Python Demo Code"
          filters:
            branches:
              only: main
      - hold:
          name: "Approval Needed for Deployment"
          type: approval
          requires:
            - "Tag and Publish Docker Images"
          filters:
            branches:
              only: main
      - deploy-via-ip-ranges:
          name: "Deploy Application via IP Ranges"
          requires:
            - "Tag and Publish Docker Images"
            - "Approval Needed for Deployment"
          filters:
            branches:
              only: main

      - build_kotlin:
          name: "Build Kotlin"
      - lint_kotlin:
          name: "Lint Kotlin"
          requires:
            - "Build Kotlin"
      - test_kotlin:
          name: "Test Kotlin"
          requires:
            - "Build Kotlin"
      - android/run-ui-tests:
          matrix:
            parameters:
              system-image:
                - system-images;android-30;default;x86_64
          name: "Test Android UI: <<matrix.system-image>>"
          requires:
            - "Test Kotlin"
      - test_ios:
          name: "Test iOS UI"
          requires:
            - "Test Kotlin"
      - hold_for_deploy:
          name: "Deployment Approval?"
          type: approval
          requires:
            - "Lint Kotlin"
            - "Test iOS UI"
            - android/run-ui-tests
      - deploy_android_app:
          name: "Deploy Android App"
          requires:
            - "Deployment Approval?"
      - deploy_ios_app:
          name: "Deploy iOS App"
          requires:
            - "Deployment Approval?"
